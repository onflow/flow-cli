// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	github "github.com/google/go-github/github"

	mock "github.com/stretchr/testify/mock"
)

// GitHubRepositoriesService is an autogenerated mock type for the GitHubRepositoriesService type
type GitHubRepositoriesService struct {
	mock.Mock
}

// GetContents provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *GitHubRepositoriesService) GetContents(_a0 context.Context, _a1 string, _a2 string, _a3 string, _a4 *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for GetContents")
	}

	var r0 *github.RepositoryContent
	var r1 []*github.RepositoryContent
	var r2 *github.Response
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) (*github.RepositoryContent, []*github.RepositoryContent, *github.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.RepositoryContent); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*github.RepositoryContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) []*github.RepositoryContent); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*github.RepositoryContent)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) *github.Response); ok {
		r2 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).(*github.Response)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string, string, *github.RepositoryContentGetOptions) error); ok {
		r3 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// NewGitHubRepositoriesService creates a new instance of GitHubRepositoriesService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGitHubRepositoriesService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GitHubRepositoriesService {
	mock := &GitHubRepositoriesService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
