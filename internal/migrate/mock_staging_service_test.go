// Code generated by mockery v2.40.3. DO NOT EDIT.

package migrate

import (
	context "context"

	common "github.com/onflow/cadence/runtime/common"

	mock "github.com/stretchr/testify/mock"

	project "github.com/onflow/flowkit/v2/project"
)

// mockStagingService is an autogenerated mock type for the stagingService type
type mockStagingService struct {
	mock.Mock
}

// PrettyPrintValidationError provides a mock function with given fields: err, location
func (_m *mockStagingService) PrettyPrintValidationError(err error, location common.Location) string {
	ret := _m.Called(err, location)

	if len(ret) == 0 {
		panic("no return value specified for PrettyPrintValidationError")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(error, common.Location) string); ok {
		r0 = rf(err, location)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// StageContracts provides a mock function with given fields: ctx, contracts
func (_m *mockStagingService) StageContracts(ctx context.Context, contracts []*project.Contract) (map[common.AddressLocation]stagingResult, error) {
	ret := _m.Called(ctx, contracts)

	if len(ret) == 0 {
		panic("no return value specified for StageContracts")
	}

	var r0 map[common.AddressLocation]stagingResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*project.Contract) (map[common.AddressLocation]stagingResult, error)); ok {
		return rf(ctx, contracts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*project.Contract) map[common.AddressLocation]stagingResult); ok {
		r0 = rf(ctx, contracts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[common.AddressLocation]stagingResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*project.Contract) error); ok {
		r1 = rf(ctx, contracts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockStagingService creates a new instance of mockStagingService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockStagingService(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockStagingService {
	mock := &mockStagingService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
