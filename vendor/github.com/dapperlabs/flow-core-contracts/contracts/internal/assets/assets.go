// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../src/contracts/FlowFees.cdc (1.313kB)
// ../src/contracts/FlowServiceAccount.cdc (4.54kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _flowfeesCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x4d\x8f\x9b\x30\x10\xbd\xf3\x2b\xa6\x37\x90\x0a\xac\xda\xaa\x87\x88\x4a\x8d\xda\xe5\xdc\x43\x3f\xce\x8e\x19\x16\xab\x60\x47\xf6\x18\xb6\x5a\xe5\xbf\x57\xb6\x31\x6b\xba\x89\xaa\xcd\xc5\x02\xcf\xbc\x79\xef\xcd\x0b\x62\x3a\x2b\x4d\xd0\x5a\xf9\x20\x4e\x23\x7e\x57\xbf\x51\x42\xaf\xd5\x04\x77\x8f\x77\xef\xb2\x78\x3d\xaa\x65\x7f\xf5\x3e\xcb\xce\xf6\x04\x5c\x49\xd2\x8c\x87\x8a\x16\xd1\xc0\x53\x96\x01\x00\xd4\x35\xdc\xcf\x28\x09\x68\x60\x04\xc2\x00\x4e\x82\x08\x3b\x58\x06\x94\x40\x0e\xcb\x00\xd3\x08\x1d\x9e\x95\x11\xee\x86\x14\xd0\x80\xd0\x23\xc2\xcc\xec\x48\x1e\xc7\x0d\x41\x0f\xe4\xe7\x9b\xaf\xb1\x3c\x67\x93\xb2\x92\x0e\xf0\xa3\x15\x8f\x1f\x3f\x14\xaf\x1c\xbb\x08\x1a\x3a\xcd\x96\x55\xd1\xff\x07\xff\x8a\x0d\x37\x07\x7f\xd3\x62\x66\xb4\x62\xf8\x01\x0e\x64\x14\x3c\x6a\x84\xde\x4a\x4e\x42\x49\xdf\xc1\x38\x47\x63\x72\x83\x63\x5f\xc0\xcc\x74\xe8\x3b\xc0\xe7\xcd\xec\xea\xa7\x67\xb3\xd1\xe9\xad\x8c\x50\xb9\x63\xed\x6a\xd3\xbd\x85\xfa\x02\x9e\x7c\x87\xfb\x8d\x48\x41\x5f\x53\x86\x93\x99\x37\x2f\x07\xa4\xd5\x27\x36\x32\xc9\x11\x3e\xf9\xfa\x6a\x7d\xdc\x4a\x1c\xdb\xca\x13\xad\xf6\x4c\x9a\xd2\x9d\xc5\x56\xe8\x7c\xbf\xb9\xb2\x15\x35\x54\x5f\x9e\x05\x6a\x34\xca\x6a\x8e\x70\xec\x26\x21\x85\x21\xcd\x48\xe9\x44\x4f\x5d\x6f\x8b\x4b\xde\xa5\xd7\xc7\x71\x54\x8b\xf1\xfb\x64\x3b\x10\x52\x5b\x6b\xcc\xc1\x8d\xcd\xa7\x76\xc7\x96\xa0\xa4\xd5\x6a\x6a\x11\xbd\x6b\xff\xc6\xe0\xfa\x32\x12\xee\xd1\xe1\x10\x8f\xa6\xdc\xfe\x32\xab\x9f\x71\xd4\x06\x1c\xce\x62\x07\x90\xd8\xfa\x32\x90\xd7\x1a\x34\x92\xd5\x12\x9a\x72\xaf\xef\x92\x5a\x2f\xa4\xa0\xdc\xbb\x75\xe4\x3c\x40\x1d\x2d\x0d\xeb\x43\xb1\xf7\xff\x8b\x46\x17\x72\x06\x12\x97\xe4\xbb\x10\xd4\x32\xd9\x81\x61\x33\x82\x20\x10\x12\x0c\x29\xcd\x1e\xae\xa5\x27\xea\x0f\x56\x71\x8f\x79\x3f\x9d\xe9\x4f\xf0\xb6\xb8\x1e\xd4\x5d\x52\x3d\x61\x87\x13\xba\xf7\x99\xc9\x9f\x5d\x48\x85\x55\x8e\x5c\xde\x94\xfe\xdd\x5b\x20\x75\x80\x7a\x25\x59\xf7\xeb\x3a\x3c\x4e\x8c\xe6\x25\xfb\x1b\x00\x00\xff\xff\xe7\x9c\xe9\xf1\x21\x05\x00\x00"

func flowfeesCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowfeesCdc,
		"FlowFees.cdc",
	)
}

func flowfeesCdc() (*asset, error) {
	bytes, err := flowfeesCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowFees.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x19, 0xa7, 0x49, 0x7c, 0xd5, 0x6, 0xfd, 0x42, 0xd2, 0xd5, 0x36, 0x34, 0x85, 0x13, 0x9d, 0x76, 0x31, 0xeb, 0x83, 0xea, 0x32, 0xf, 0x4c, 0xd6, 0x62, 0x44, 0x3, 0xeb, 0x9c, 0x1e, 0x5c, 0xac}}
	return a, nil
}

var _flowserviceaccountCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x5b\x6f\xdb\x36\x14\x7e\xf7\xaf\x38\xed\xc3\x20\x03\x89\x12\x6c\xc5\x1e\x8c\xb8\x85\x9b\x2e\xc3\xde\x86\x2c\xd9\xcb\x50\x14\xb4\x78\x64\x11\x91\x49\x81\xa4\xec\xa4\x41\xfe\xfb\xc0\x9b\x4c\xea\x52\x27\x4d\xfb\x92\x48\xe2\xb9\x7e\xe7\xc2\x73\xcc\xb6\x8d\x90\x1a\xae\x5a\xbe\x61\xeb\x1a\x6f\xc4\x1d\x72\x28\xa5\xd8\xc2\xf9\xfd\xf9\xaf\xb3\x70\x5c\x8b\x7d\x7a\xf4\x5b\x7c\x74\x85\xa8\xba\x93\x77\xb3\x59\xd3\xae\xa1\x10\x5c\x4b\x52\x38\x82\x7f\x50\xee\x58\x81\xab\xa2\x10\x2d\xd7\xf0\x38\x9b\x01\x00\x18\x32\xdc\x21\xd7\x70\x23\x09\x57\xa4\xd0\x4c\xf0\x2b\xc4\xdb\x86\x12\x8d\x34\xe3\x68\x24\x2f\xe0\xf6\x8a\xdd\xff\xfe\x6e\xde\x67\xf2\xd2\x2e\x25\x92\xef\x67\x14\x72\x45\x29\xd2\x8c\x24\xdf\x16\xb0\xa2\x54\xa2\x52\x47\x78\xaf\x71\x2b\x76\x47\xb9\xcf\xce\x60\x05\x25\xbb\x47\x7a\x2a\x89\x46\x28\x11\xa1\xa8\x88\xdc\x20\x05\x2d\x00\xef\xb1\x68\x35\x02\x01\x7d\x80\xa1\x53\xbb\x23\x32\xfe\x1e\xf9\xf5\x2c\xe1\x85\x31\xc9\xc8\xe6\xb8\x07\x6f\x66\x22\x9b\x0c\x50\x1c\xc8\xbf\xa9\x10\x6a\xa6\x34\x88\x32\x90\x03\x71\x1e\xa2\x02\x5d\x11\x0d\x15\xd9\x21\x34\x28\xb7\x4c\x29\x26\x78\xac\xd9\x31\xa8\x49\xa5\x42\xaa\x05\x3c\x7a\xc4\x16\xf0\x51\x88\xfa\xa9\x53\xfd\x17\x67\x9a\x91\x9a\x7d\x45\x20\xbc\x53\xbe\x67\xba\x02\x12\x65\xe5\xbf\xa4\xad\x35\x10\x4e\x8d\x86\x9a\xa9\x0a\x0a\xd2\x90\x35\xab\x99\x66\xa8\xf2\x4e\x77\xd9\x72\x60\x9c\xe9\x4f\x58\x1a\x0e\xcb\x9c\x7d\x31\x72\xf5\x02\x56\xad\xae\x7c\x78\xe7\xf0\x68\x79\xbc\x15\x97\x31\x88\x63\x5a\x95\x71\x9f\x69\x60\x1c\x94\x16\x92\x6c\xb0\x63\x37\xb2\x73\x73\x9e\x5d\x9c\x76\xac\xb9\x03\xe7\x8f\x6d\xa3\x1f\xac\x94\x6c\x7e\x02\x5a\x2c\xe0\xcc\xb3\x9f\x95\x81\xd4\x1e\xfb\x44\xea\x9b\x63\x9d\x2d\x0e\xbe\x3e\x18\xdc\x75\x85\xde\x32\x1b\x19\xc1\xeb\x07\xc0\xfb\x46\x28\x54\xb1\x10\x43\x46\xb1\x11\x8a\x69\x03\x8b\x4d\x2e\xd0\x95\x14\xed\xa6\xb2\x87\xd7\x58\x20\xdb\xa1\x04\xc6\x35\xca\x92\x14\x3d\x9f\x6a\xc6\xef\x2e\x7e\x39\xb8\x64\x75\x3e\x26\x8d\x24\x0f\x32\x9e\xde\x67\x1d\xb3\xd5\xef\x2c\x3f\x78\x19\x08\x4f\x12\x32\x6d\xd2\x58\x4f\xa2\xd2\xd1\xfe\x24\x78\xd6\xa4\x26\xbc\x40\x28\x19\xd6\x34\xc1\xe6\xa3\x3f\x79\x05\x34\x5e\xc4\x51\x64\x3c\xdd\xf7\x02\x63\xfe\x1e\xca\xe9\x4f\xd4\x3e\xf0\xa5\x83\xc0\xe6\x71\xf0\x53\xf0\xa8\xc8\x92\x9a\xa1\x51\xbd\x78\x83\xba\xb2\xf9\xdb\x1a\x1c\x0a\x27\x34\x8f\xa8\x80\x6a\xd4\x41\xc5\x35\x96\xb0\xb4\x7c\x89\x3b\xf9\x06\xf5\x65\x17\xa5\x6c\x0a\x83\xf9\x9b\x94\x6b\x2d\xa4\x14\xfb\xe7\x03\x3d\x7f\x73\xc8\x13\x89\xba\x95\x3c\xb2\x2b\xf7\x8f\x3d\xc4\xae\x1d\x1d\x01\x89\x25\x4a\x34\x30\xf9\x24\x4a\x31\xdc\xd9\xe7\xe7\x21\xe8\x2a\x7e\xac\xed\x2c\xa0\xef\x4c\x84\xa3\x37\xd9\x66\xd8\x84\xeb\xef\x33\x73\x0b\x4f\xb7\x11\xf8\xf0\x01\x1a\xc2\x59\x91\xbd\xbd\xe5\x64\x5d\x5b\x67\x9c\xac\x67\x39\xf8\xb6\x9f\x50\x97\xa4\xae\x91\xc2\xbe\x42\x9e\xde\x5f\xc0\x14\xa8\x76\xbd\x65\x5a\xbb\x8b\x88\x22\x6d\x0b\x97\x7d\x25\x62\xe0\xb7\x43\x83\xf9\x16\xa1\xe0\x0a\xf3\xc0\xcc\xfa\x48\x1a\x41\xe9\xc4\x70\xac\x87\xb3\x12\x14\xd6\x65\x9e\x5e\xa4\xb0\x5c\xfa\x6c\xcd\xce\x63\xea\x03\xd8\xdd\xa7\xa7\xee\x29\x49\x6b\xdd\x41\x0b\x4b\xa7\x61\x18\x67\x63\xd8\x3c\xe1\x2a\x11\x1d\xcf\xc5\x69\x24\x21\x37\xb7\x1a\x95\x64\x9f\x91\xad\xb1\x7f\x31\x66\x72\xd4\xe9\xc2\xe0\x95\xfb\x2e\xee\x43\x7f\x71\x1a\xc4\xf7\x63\xf5\xc9\x02\xa7\x2c\xdc\xe1\x26\x2d\xfc\xb5\x6f\xc7\x06\x1b\x0c\x02\x0d\x79\x40\x39\x91\xc4\x46\xc2\x70\xee\xca\xbe\x38\xa6\xa3\xf8\x0f\x87\x8d\x17\xc5\xe0\xc5\xd8\x5b\xab\x5e\x01\xfe\xd0\xde\xd7\x04\xc0\xf5\x12\x05\x5a\xb6\x68\x20\x31\x81\xd8\xb0\x9d\x29\x1d\x37\xfd\x98\xa2\xb1\x43\x54\x28\x9a\xde\x0c\x75\x02\x25\xa9\x15\x82\xd0\x15\xca\x3d\x53\x98\x0e\x36\x2a\x1d\x4e\x4d\x51\x84\xa9\x2a\x0c\xa4\x6e\xbe\x1a\x36\x95\x81\xb7\x42\xaa\xff\x3c\xf7\x67\xd3\x35\xac\xe2\x9e\x3f\x26\xd8\x42\xb2\xaf\x2e\x83\x24\x2a\xd1\x4a\xd7\x3e\x8a\x8a\xf0\x0d\xba\x62\x37\x97\xa7\x32\xa3\xa3\x79\x0b\x5b\x41\x67\x78\xc7\xb5\xa2\x5b\xc6\x99\xd2\xd2\xe8\x0e\x1b\x82\x57\xa4\xd0\xa7\x6d\xdc\x60\x42\x17\x89\x21\x50\x38\x6c\x0c\xbd\x65\xa0\x97\x63\xc3\xed\x64\xd0\x24\xbc\x84\x84\x0d\xb7\xec\xd8\xd6\xe2\xfe\xcf\xc7\xd2\x37\x76\x69\xac\x12\xc7\xfc\x1a\xad\xba\x17\xfb\x36\x56\x80\x93\xfe\x1d\x5f\xb0\xbe\xed\x23\xa1\x54\xc5\x63\x7b\xc8\x72\xe2\xbe\xfa\xec\x41\x9a\x62\x20\xe4\xc0\x7d\x42\xe9\x30\xb5\x27\x56\xae\x97\x61\x60\xd3\x3c\x79\xff\x0c\x4b\x5b\xa0\xdf\x86\x63\x6a\x6d\x4c\xdf\xa7\x80\x91\x76\x6d\xfc\x31\xd8\x38\x59\x3f\x0f\x9e\xdc\x29\xc8\xee\xf0\x61\xda\xbd\x09\x8c\xa6\xd6\xe3\x69\x94\x22\xac\xcc\x9e\x96\xc5\xf6\x8e\xde\xe0\x70\x9e\x9f\xa7\x14\xa3\x29\x6e\xa8\xa6\xc9\x84\x54\xb0\x84\xc7\xde\x05\x43\x4c\x47\x32\xd7\x84\xef\xc2\x49\x87\xca\x0e\x56\x5b\xba\x7c\x98\xa3\xb1\x9a\x9c\x24\xbf\x08\xf4\xad\x08\x0b\xa2\x15\x35\xb2\x09\x86\x10\x99\xe3\x70\xab\x3c\xcd\xfe\x0f\x00\x00\xff\xff\xcd\x2f\x7c\xe6\xbc\x11\x00\x00"

func flowserviceaccountCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowserviceaccountCdc,
		"FlowServiceAccount.cdc",
	)
}

func flowserviceaccountCdc() (*asset, error) {
	bytes, err := flowserviceaccountCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowServiceAccount.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0xa9, 0x7f, 0xf6, 0x3f, 0x59, 0x53, 0xe8, 0x9c, 0xef, 0x3b, 0x74, 0x5a, 0x8, 0xe8, 0xb0, 0xb7, 0x47, 0x1e, 0x37, 0x97, 0x5a, 0x11, 0xbe, 0x14, 0xa0, 0xff, 0xc, 0x99, 0xe7, 0xf4, 0x90}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"FlowFees.cdc":           flowfeesCdc,
	"FlowServiceAccount.cdc": flowserviceaccountCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"FlowFees.cdc":           &bintree{flowfeesCdc, map[string]*bintree{}},
	"FlowServiceAccount.cdc": &bintree{flowserviceaccountCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
