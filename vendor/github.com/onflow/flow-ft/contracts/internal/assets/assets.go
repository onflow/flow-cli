// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../src/contracts/CustodialDeposit.cdc (3.533kB)
// ../src/contracts/FlowToken.cdc (7.074kB)
// ../src/contracts/FungibleToken.cdc (7.306kB)
// ../src/contracts/TokenForwarding.cdc (1.954kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	clErr := gz.Close()
	if clErr != nil {
		return nil, clErr
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _custodialdepositCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4b\x6f\xe3\x36\x10\xbe\xeb\x57\x0c\x50\xa0\xb0\x03\xdb\x5a\xb4\x45\x0f\x81\xbb\xe8\x6b\x03\xec\x6d\xd1\x4d\xd3\x33\x2d\x8d\x24\x22\x32\x29\x90\x23\x3f\x1a\xe4\xbf\x17\x43\x52\x12\x29\xdb\xdb\xb4\xeb\x43\xec\x48\x9c\x6f\xbe\xf9\xe6\xc5\xfc\xee\x2e\xcb\xbe\x81\xc7\x06\xe1\xb7\xde\x92\x2e\xa5\x68\xe1\x77\xec\xb4\x95\x04\x78\x12\xfb\xae\x45\x28\xb4\x22\x23\x0a\xca\xb2\x5f\xd4\xc5\x43\xa8\xb4\x01\x51\x14\xd8\x91\x54\x35\x94\xde\xd6\x42\x65\xf4\x1e\x84\x3a\x43\x6f\xd1\x64\x56\x03\x35\x82\x40\x40\x31\xba\xb1\x68\x0e\xb2\x60\xa4\xbe\x2d\xa1\x30\x58\x4a\x02\xe2\x83\x28\x1d\xa4\xee\x15\x6d\xb2\xec\xb1\x91\x16\xa4\x05\x31\x39\x97\xfc\x77\x8f\x8a\x04\x49\xad\x40\x57\x20\x22\xfe\x06\x0b\x94\x07\x34\x13\xf1\x0b\xdf\x01\x1d\x8e\x92\x1a\x06\xd6\x55\xb5\x2e\x1a\x21\x15\x88\xae\x83\x42\x28\xa6\xcd\x64\x7c\x64\x59\x1a\x16\x9e\x08\x8d\x9a\x60\x98\xdb\x14\x41\x83\xfb\x10\x06\x18\x6c\xf1\x20\x14\x65\x2c\xc2\xe8\x74\x74\x96\x65\x77\x79\x96\xc9\x7d\xa7\x0d\xc1\x43\xaf\x6a\xb9\x6b\xf1\x51\x3f\xa3\xf2\x7e\xde\x9d\xde\x7d\x37\xbe\x6e\xf5\x31\x7d\xf5\x7d\x96\x75\xfd\x6e\x4a\xc4\x28\xc0\x90\xbf\x97\x2c\x03\x00\xc8\x73\xf8\x70\x40\x45\x3e\x03\xd2\x02\xee\x25\x11\x96\x70\x6c\x50\x39\x9a\x23\x84\xb4\x1c\x85\x20\x2c\x9d\x25\xc3\xa3\x33\xfd\xa8\x24\x49\xd1\xca\xbf\xb1\x5c\x48\xff\xfb\x73\xdf\x75\xed\xf9\x1e\xfe\x7c\x90\xa7\x1f\x7f\x58\xbe\xc9\x17\xf3\xb7\x20\x0c\x3a\xe1\x4b\x23\x8e\x21\x1c\x01\x4f\xa2\x6f\x69\xe6\xf5\xaf\x70\x68\x21\xf6\x2c\xdc\xff\xf5\x15\x92\x87\xa5\x4b\xe8\x55\x4f\x8f\xa2\xae\xb1\x0c\xc2\xcd\xdc\xad\x80\x44\x7d\x0f\x9f\xc9\x48\x55\x07\xdf\x6c\x69\xd0\xea\xde\x14\x08\x52\x11\x9a\x4a\x14\x38\x74\xce\xa7\x7e\xd7\xca\x02\x5e\xdc\xd1\xe1\x78\xd5\x2b\x06\x8a\xdc\x70\xe4\xf7\xf0\x73\x92\xf8\x8d\x63\x37\x73\xc9\x10\xaf\x57\x1c\x07\xa0\x3f\xc2\xff\xf7\x69\x0d\x6d\x3e\x19\x7d\x90\x25\x9a\xd5\x05\xaf\x91\x58\x9e\xc3\x83\xc4\xd6\x29\xd3\x68\xfe\x6e\x10\x0e\x4c\xc1\xab\xca\xcf\xac\x7b\x18\xf4\x74\x4f\x3b\xd4\xdc\x85\x41\xd7\x24\xca\x16\xc9\xdb\x73\x60\x43\xc9\xfa\xa0\x12\xaf\x89\x12\xd1\x8b\x84\x59\xaf\x0a\xd7\xdf\xce\xe9\xd8\x82\x21\x83\x2c\xbb\xef\x32\x4b\xda\x60\x19\xe5\x35\xd8\x73\x53\x72\x4d\xf8\xd1\xe1\xf2\xec\xfa\xdd\x85\x23\x6a\x37\xb9\xf8\xb7\x9b\x50\x57\x28\x7c\x5d\xd6\xa2\xf4\xf3\x87\x89\xdc\x28\x33\x46\xdc\xec\x44\x2b\x54\x81\x01\x83\x44\x48\xfb\xf0\xb1\xd8\x56\x1b\x27\xec\xa6\x4c\x88\x6c\xd7\xfc\x3d\x1d\x7e\x4d\x64\x1e\xda\xec\x4d\x0a\x93\x78\x46\xa7\x15\x17\x74\xcd\x03\xcb\x11\x04\xe1\x1e\x0a\x53\xf7\x3c\x72\xe7\x0a\x0f\x2e\x42\x6d\x04\x1b\xd7\xd5\x2c\xae\x53\x66\x13\x1b\x7d\xa4\x30\x64\x38\x95\x0a\x8f\x40\xc8\x23\x4e\x98\x73\x48\xec\xd0\xcf\xbd\xc5\xb1\x30\x93\xda\x69\x10\xf6\x5a\xe1\x79\x3c\xb9\x43\xde\x3d\x64\x84\xb2\x15\x1a\x83\xe5\x86\xbd\x18\xa4\xde\x28\x5f\xbe\x0a\x8f\xed\x39\x06\x09\x73\x6e\x70\xa9\xc7\x41\x88\xa7\xc0\xa0\x10\x6d\x8b\x25\x58\x0d\x92\xdc\x4a\xd8\x45\xa3\x24\x86\xc2\xd6\xe2\xb1\x41\x83\x9b\x2f\x55\xd1\xf1\xc6\x30\xbb\x5e\x4b\xd7\xaa\xe7\x62\x1c\xfa\xef\xb4\x50\x7c\xd0\xb0\x5d\x47\x15\x73\xe1\x7a\x6e\x98\x16\x4d\x8d\xf4\xab\xaf\xc6\x1b\x65\x13\x0b\x1b\xea\x96\x77\xf0\xcd\x5e\x1c\x24\x98\x80\x17\xcb\x21\xfe\x59\xa0\x81\x7e\x44\x7e\x37\xa3\x12\x71\xe5\x4d\xe4\xd6\xd1\xd3\xf5\x89\x33\xef\xc1\x09\x15\xb6\x6b\x18\x0d\xaf\x41\x97\x68\xc9\xe8\xf3\x62\x0e\x11\x9e\x47\x50\x91\x75\x84\xc1\xf7\x06\x6b\x17\x7c\x6c\xe9\x62\x97\xe3\x06\x9d\x4d\xed\xc5\x8d\x71\x19\x7b\xe6\xa9\x3a\x08\xfd\x13\xa4\xba\x64\x49\x74\xc3\xb5\xc9\x8a\x03\x2e\x12\xe6\xdb\xb5\x2f\xf9\xf9\xd6\x88\x05\xdc\xae\x1d\xf6\x72\x95\x58\x92\xbe\x87\x9c\x13\x2b\x6a\xcc\xcb\xd4\x7a\x3c\xb8\xbc\x41\xa4\x95\xea\x79\xfb\xed\x4b\xb2\x81\x5e\xdf\xa7\xd4\xf2\xce\x3d\x9e\x63\xfb\xc3\x33\x2e\xc2\xd4\x48\xff\x8d\x8f\x6b\x9e\x2f\xdc\x60\x82\x92\xc9\x9e\xcd\x73\x77\x29\xe6\x93\x9c\x3e\x3f\x25\xd3\xb1\x25\x95\xa5\xb8\xf4\x67\xba\x8e\x6b\x7a\xc0\xe3\x61\xe9\xda\xc3\xf2\x40\xe1\xab\x66\xb8\x0f\x86\x50\x56\x7c\x71\xa1\x06\x0d\x68\x03\x4a\xd3\xb8\xe8\x2e\x80\x5a\x83\xa2\x3c\x03\x9e\xa4\x25\xcb\x48\x01\x21\x1b\x9b\x62\x39\x5b\xf2\x8f\x3a\x2a\xc0\x6b\x6c\x57\xe9\x72\x7e\xc6\x8b\x6e\x06\xdd\xf3\xd5\x75\xf0\xe5\xc2\xe1\x4b\xb2\xa4\xc4\x56\x1b\x90\x15\x28\x1d\x6e\x11\xd2\x06\x90\x55\x50\x2f\x88\x87\xfb\x8e\xce\xfe\x4c\xd4\xcf\x95\xab\x74\x6f\xf0\x34\xf4\x69\x5a\x4e\x5a\x94\xdb\x79\xab\xbc\x0f\xbb\x70\x2c\x8a\x6a\x78\x7f\x7b\x0c\xfc\x6b\x3f\x6e\xd7\x11\x8f\x68\x54\xba\x71\x3f\x43\x64\xd6\x0a\x8f\x1f\x38\xa8\x81\xf7\xc4\xd1\x07\x3e\xbd\x5c\x5c\x59\xed\x6f\xa0\x93\x38\x58\x5e\x8c\x9d\xd7\xec\x9f\x00\x00\x00\xff\xff\x01\xf1\xcd\x08\xcd\x0d\x00\x00"

func custodialdepositCdcBytes() ([]byte, error) {
	return bindataRead(
		_custodialdepositCdc,
		"CustodialDeposit.cdc",
	)
}

func custodialdepositCdc() (*asset, error) {
	bytes, err := custodialdepositCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "CustodialDeposit.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0x8f, 0x1d, 0xd1, 0xe0, 0xbd, 0x34, 0x85, 0x2e, 0x3e, 0x2d, 0xd9, 0xde, 0xcf, 0xbc, 0xf5, 0xd8, 0x7f, 0xd5, 0x71, 0xd7, 0xba, 0x2c, 0x43, 0xbf, 0xad, 0xaf, 0xbc, 0xfb, 0x8, 0xd4, 0x3b}}
	return a, nil
}

var _flowtokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xcd\x6e\x23\xb9\x11\xbe\xfb\x29\x2a\x7b\x48\x64\xac\x2d\x1b\x41\x90\x83\xe0\xd9\x1d\x4f\x32\x03\xec\x21\x8b\x60\x33\x49\xae\xa6\xba\x4b\x12\x33\xdd\xa4\x40\xb2\x25\x6b\x07\x7e\xf7\xa0\x8a\x3f\x4d\x52\x2d\xd9\x5e\xef\xf8\x30\xe3\xee\x26\xeb\xf7\xab\xaa\x8f\xb4\xec\xb7\xda\x38\xf8\x34\xa8\xb5\x5c\x76\xf8\x59\x7f\x41\x05\x2b\xa3\x7b\xb8\x7d\xbc\xfd\xf3\xc5\xc5\x76\x58\x42\xa3\x95\x33\xa2\x71\xf0\xa9\xd3\x7b\x5e\xb1\xa8\x36\x7c\xbd\xb8\x00\x00\xb8\xb9\x81\xcf\xda\x89\x0e\xec\xb0\xdd\x76\x07\xd0\x2b\xde\x02\x8e\x16\x59\x90\x0a\xf0\x51\x5a\x87\xaa\x41\x5e\x4f\xc2\x77\xc2\x80\xa3\x4d\xff\xe2\x3d\x0b\xf8\xf7\x27\xf9\xf8\xd7\xbf\x24\x81\x1f\x77\xa8\x1c\xb8\x8d\x70\x20\x2d\x60\x2f\x9d\xc3\x16\xf6\x1b\x54\xe0\x36\x38\xda\x26\x2d\x34\x06\x85\xc3\x36\x89\x46\xde\xca\x16\xda\x9f\x94\x74\x52\x74\xf2\x57\x6c\x67\xd2\xff\x5e\x2a\xbc\x7c\x91\x46\xef\x88\x30\x08\x7b\xe9\x36\xad\x11\xfb\x10\x2d\x01\xff\x11\x43\xe7\x26\x75\xff\x37\x2e\x9d\x89\x5e\x0f\xca\x45\x95\x57\xbc\x75\x01\xf7\x6d\x6b\xd0\xda\x1f\x5f\x6b\x42\x8b\x5b\x6d\x25\x7d\x71\xfa\xac\x01\x7f\x8f\x0b\x8f\x0c\x70\xfa\x95\xea\x15\xee\x73\x13\x7a\xa9\x4e\x45\xfc\x1f\xfc\xa9\xd2\xf8\x7a\x17\xad\x33\xfa\x70\x42\xc5\x87\xc1\xa8\xdf\xa6\x42\xb0\x23\x6c\xbd\x01\x83\x56\x0f\xa6\xc1\xd3\x18\x62\x5f\xcc\xdf\xfc\xb7\x99\xe8\x3a\xbd\xc7\xf6\xfe\xb7\xaa\x5d\x92\xd9\x2f\x51\xcb\xfe\x25\xb5\xa3\x86\x31\xd3\x37\x37\x49\xab\x68\x36\x30\x58\x34\x60\x9d\x36\x68\x41\x28\x90\xca\x3a\xa1\x1a\xa4\x42\xd4\xaa\x3b\x70\xc5\xf0\x66\xaa\x45\xb7\x41\xe9\x57\x8b\x35\xa6\xfa\xdd\x20\xac\x06\xd5\x38\xa9\x7d\xc5\x8e\x5b\x84\x6a\x61\xad\x77\x48\x31\x87\xa5\x17\xb6\x35\xc8\xef\xb7\xda\x3a\xaa\xc5\x56\xf2\xc6\x28\x4d\xaa\xaa\x51\xc4\xba\x3d\x70\x76\x1b\xd1\x75\xd8\xce\x73\xdd\xcd\x06\x9b\x2f\x16\x36\x62\xbb\xa5\x78\x39\x30\x83\x72\xb2\x47\xde\x89\x3b\x34\x20\x92\x7d\x1c\xb8\x42\x44\x94\xf4\x4b\x08\x2d\x7d\x57\xde\xf5\x25\xc6\x20\x47\xaf\xa8\x75\xe0\xa3\xa3\xe0\x14\x9d\x84\x33\x47\x36\x46\x69\x1e\x88\x2b\xa9\x78\xef\x15\x58\x4d\x9f\x0d\x27\x4e\x69\xd8\x8b\x03\xac\x34\x19\xd6\x8b\x4e\x36\x52\x0f\xd6\x27\xc2\xe9\xa0\xd2\x07\x30\x45\x45\x0f\x41\xa9\x54\x20\xa4\x99\xc3\x3d\xd8\x2d\x36\x52\x74\x01\x68\x23\x34\x14\x62\x6b\x49\xd0\x72\x34\xc1\x69\x06\x6e\x94\x36\x56\x64\x11\x05\x42\x51\x12\xc3\xfa\xab\xa6\x3d\xff\xa7\xd1\x3b\xd9\xa2\xb9\xaa\xde\xff\x82\x0d\xca\xdd\xf1\xfb\x0f\xa2\x63\x30\x85\x66\x1f\xd4\x6f\x74\x47\x16\x6e\x10\x96\xe1\xbb\x5e\x81\xe0\x00\xd8\x60\x57\x5a\x1e\xfb\x7d\x58\x59\xf6\xfa\x04\x99\xd8\xa8\x0b\xa1\x84\x84\xe8\x0d\x07\x95\xf2\x4f\xc0\x48\x7b\x69\xe3\xac\x92\x7c\x09\x5f\xd3\x77\xfa\xb1\xd8\xad\xe6\x51\xe4\xbb\x28\x3c\x2d\x79\x2a\x2c\x89\x1d\x3e\x7b\x97\x7f\xfe\x14\x51\xe8\xf1\x22\xbe\xc4\x9a\x73\xb8\x26\x98\x72\x77\x00\xc1\x2f\x85\x59\x0f\x3d\x86\x9c\x45\x54\xa9\x36\xa9\xb0\x5e\x48\xd8\xc3\x03\x25\xd5\xdd\x3c\xdf\xf4\x93\x0b\x90\xb2\xa1\x97\x38\xa4\x01\x2e\xcc\x21\x14\x69\x6c\x3b\x83\xf5\x48\xa1\xf4\xe4\x02\x48\x6c\xaf\x15\x1e\xd2\xca\x25\x4a\xb5\x06\x67\x84\xb2\x2b\x34\x06\xdb\x39\x69\x31\xe8\x06\xa3\x7c\x62\x15\xee\xbb\x43\x2e\x24\x16\x52\x50\xa9\x8b\x72\x62\xb9\xbe\x2c\xa9\x52\xa4\xe3\x1a\x5c\x66\xe3\x2a\x17\x85\x9d\xc5\x3d\x15\xd3\x7c\x2a\xcc\x04\x98\xd5\xa0\x52\x9c\xea\x56\xbf\x80\xf7\x25\x46\xbd\x45\x67\x93\x5e\x3c\x5e\x87\x98\x17\x1b\xa8\x65\x9f\x1c\xdd\xfe\xff\x38\xba\x59\x98\xde\x2b\x34\x3f\xce\x85\x9f\xa3\x97\x85\x2c\x1f\x47\xb8\xbb\xce\x3b\xc1\x08\x53\x2f\xed\xf2\x04\x02\x43\xc4\x5e\x03\xc0\x90\x13\xbd\xfc\x1f\x36\x35\xfa\x18\x72\xa2\x6d\x6d\x51\x6f\xce\xa6\x22\x0b\x99\xcc\x0a\x99\x1e\xd9\x3d\x3b\x0d\x46\x69\x21\x4c\x43\xda\x1c\xa6\x35\xef\xb2\xa4\xd0\x1b\xb3\xc4\x46\x0c\x16\x47\x48\x17\x55\x46\x36\x66\x30\x26\xc0\xa2\x89\xba\x43\x63\xe3\xd1\xc0\x5b\xff\x34\x5a\xbb\x11\x85\x23\x4b\x44\x45\x20\xb4\x43\x8f\x2d\xbb\xca\x4d\x7a\xa5\x79\xd0\x04\x04\x06\x36\x31\x3f\x42\x58\x08\xf5\xcc\xa7\x75\x0a\x55\x75\x2f\xe9\xd0\xc1\x8e\xfd\xbb\xbb\x0e\x1c\xd0\xfe\x01\xde\x27\x8e\x3c\x2f\x5d\x7d\x0e\x89\xdf\x7b\x61\xf3\xba\x27\x55\x80\x3c\xa6\x72\xc5\x36\xcf\xe8\x9e\x45\x65\xb1\x07\xde\xc1\xed\xfc\xb6\xf8\x1e\x13\xb9\x2b\x5c\xc8\xc0\x19\x16\xcc\xea\xa0\x8c\xde\x67\x9c\x1e\xde\x9d\x78\x7f\x5d\x84\x20\xd3\x93\x69\x4b\xed\xe6\x63\xbf\x75\x87\x29\xe6\x53\xd6\x41\xd9\x1e\x3d\x00\xa9\x7d\x80\xc8\x71\xfd\x2b\x1a\x9d\xc6\xbb\x6a\x53\xbb\x93\x63\x3b\x13\x5d\x47\x8d\x31\xb4\x35\x1a\xd2\x3c\xd4\xfb\xc1\xfa\xf6\x46\xf3\xdb\x26\x2e\x92\x0b\x63\x02\xc6\x42\xbc\xd8\xd4\x29\x6b\xd2\x45\x2f\xb4\x69\x3d\x55\xe0\x3a\xf2\xdf\x93\xb0\xa6\xe1\x81\xe0\xe7\xbf\x58\x76\x5c\xa2\xc6\xcf\xe7\x08\x59\x1b\xb8\x44\x98\xb6\xe0\x0e\x5b\x3c\x62\x02\x04\xf1\x3a\x8c\xb3\xe7\xdb\xe7\x33\xdd\xeb\x76\x7e\x7b\x99\xe7\xaa\xe0\x1c\xf7\x6d\x2f\x95\xb4\xce\x08\xa7\x4d\x26\x33\x25\xf4\x67\xdc\x7b\xba\xf3\xa2\xfe\x96\xf2\x9a\x65\x6b\x92\xc5\x9f\x9b\x23\x95\xe2\x13\x4c\x7e\x01\xef\x03\x0f\xfb\x7a\x5c\x86\x67\x8f\x02\xc5\xe3\xf9\x41\x30\x6d\xc1\x09\x01\xe5\x58\x48\x5e\xf8\xf3\xc1\x1b\xc3\x57\x9d\x46\x5e\x14\x3e\xaf\x98\x01\xe4\x7f\x9d\x8a\x54\x7d\x7a\x39\x17\x8d\x28\xf0\x64\x0f\xc8\x90\x72\x4c\xf3\xe3\xb8\xf3\x83\x90\xab\x40\x10\xfa\x62\x01\xf9\x63\x00\x4d\x96\x48\x9e\x5f\xc4\x9a\x13\x08\x6a\x02\x15\x78\x1a\xd5\x9d\x3f\xaa\xc6\x23\x43\xc4\x62\x39\x16\x13\x5b\x87\x8c\x03\x4f\x42\xaf\xd0\x44\xdb\x3e\x97\x04\xfa\x5c\x86\x69\xb9\xcd\xfc\xba\xe2\x51\x4f\x56\xf5\xb1\xa7\xb9\xec\x72\xe6\xaa\xe6\xa2\x19\xe3\xeb\x4f\x35\xc1\x73\xe0\x18\xcd\x9d\x62\x69\xe5\x54\xac\xe0\x42\xa7\xc8\xf2\x0d\xfd\x84\x28\xff\x10\xc4\xcc\x6e\x2f\x17\xf0\x9d\x8f\x57\xb8\x77\xf0\xcd\x78\x89\xb0\x66\x14\x19\x0a\x84\xe2\xde\xfe\xdd\x29\x69\x77\x61\xec\x56\xe1\x3f\x21\xb7\x43\x6b\xbd\x50\x4e\x7b\x48\xa9\x17\x55\xaa\x78\x7a\xc3\x18\xfc\x7e\x8a\x84\x1e\x5b\x09\x53\xa6\x3f\xcb\x60\xab\x6b\x98\x9a\x70\xc2\x9b\x38\x2a\x9f\xb9\xa6\x9b\xe8\x14\x09\xaf\xdd\x29\x9e\x8f\x4a\x9f\xfe\x8d\x95\x9e\x75\xba\xb7\x96\x3f\xf5\xbb\x67\x4b\x3f\x75\xb5\x82\x61\x0e\x46\xbd\xa2\x20\x03\x47\x1a\x49\x79\xbc\x8e\xb9\x02\x5c\xad\xb0\x71\x72\x87\xdd\x81\xa5\xf2\x09\x6c\xa4\xbb\x27\xc4\xff\xac\x1d\x2e\x3c\x43\xf7\xac\x22\xbb\x28\x13\x83\xd3\xbd\x70\x92\x2a\xf6\x00\x76\x58\xf2\x5d\x06\xb6\xe3\x61\xb2\x68\x62\xf9\x2d\x6d\x71\xc9\xc3\x46\x0f\x8d\xd3\xe6\x6c\xb1\x8f\xa1\xf8\xb6\x8c\x99\xb6\x88\x08\x97\xd3\x04\x79\x9a\xaf\x56\x95\x50\xdd\x16\x1e\xc3\x3a\x03\xb7\x07\x36\x81\xe8\xde\x63\x68\x01\xf7\x83\xdb\x84\x87\xdc\x31\x06\x76\x59\xe5\xc4\xa6\xf3\x68\xfb\x11\x98\x05\x99\xf9\x68\xdd\x90\xb3\x71\xc2\x24\x52\xec\x90\xe8\xa8\x54\xc5\x15\x5d\x95\x8f\x22\xa4\xd3\xe5\x5b\x1b\x38\x7a\x9c\xfb\x37\x27\x7d\xb3\xbb\x6b\x16\xe6\x4f\x11\x37\x41\xef\xcd\x2a\x26\xc8\x67\x75\xca\x37\x41\xc8\xe8\x64\x03\x8d\xd8\x8a\xa5\xec\xa4\x3b\xc4\x19\xc2\x6c\xb8\xcd\xaf\x27\xf8\x3e\x0e\x1f\xb7\xda\xa2\xad\x47\xeb\x43\x60\xb5\x0f\xd0\xa3\xdb\x68\x3a\xc4\x19\x3d\xac\x7d\xb8\x1e\xe2\xd5\xd4\x03\x5f\xb3\x98\x95\x98\xe6\x2b\x85\x63\x9d\x54\x5f\xee\xfe\x58\x81\xec\xeb\xf4\x95\xd7\xd3\x0f\xb3\x02\x3d\x37\xde\xab\x31\x02\xe9\x6e\xac\x58\xe6\x84\x59\xa3\x3b\x19\xb1\xb4\xf6\x1b\x87\x2e\xa4\xfc\x01\x56\x12\xbb\x2a\x72\x1f\xe2\xb7\xdf\x37\x70\x41\xec\xb3\x71\x0b\xeb\xde\x1c\x36\xee\x07\xdc\xdb\x47\xbc\x17\x07\x8d\xd9\x79\x78\xf3\xbb\x53\xf0\x66\x41\x65\x8e\x3e\x52\xfb\x10\x2a\xdc\xc7\x73\x0a\xec\x46\xef\x33\xc6\x97\xae\x8d\xf7\xc2\x66\x97\x97\xe3\x25\x57\xd6\x81\xce\xfc\x11\x6a\xba\x4a\x9f\x2e\x9e\x2e\xfe\x1f\x00\x00\xff\xff\x4d\xa4\xc6\xb3\xa2\x1b\x00\x00"

func flowtokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_flowtokenCdc,
		"FlowToken.cdc",
	)
}

func flowtokenCdc() (*asset, error) {
	bytes, err := flowtokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FlowToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0x81, 0x4b, 0x5d, 0xc9, 0xe, 0x76, 0x5f, 0x31, 0xc9, 0x26, 0x9c, 0xc, 0xb4, 0xda, 0x8c, 0xcc, 0x97, 0x7d, 0x7e, 0xdb, 0x2d, 0xf, 0xf7, 0xed, 0x80, 0x68, 0xe0, 0xa1, 0x12, 0x6e, 0x98}}
	return a, nil
}

var _fungibletokenCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x59\x4d\x73\xdc\xb8\x11\xbd\xf3\x57\x74\xd9\x07\xcb\xce\x58\xda\x43\x2a\x07\x57\x79\x13\xbb\xd6\xaa\xf2\x25\x49\x25\x4a\xf6\x3a\x18\xb2\x39\x83\x15\x08\x70\x01\x70\x46\xb4\xcb\xff\x3d\xd5\x8d\x0f\x82\x1c\x4a\x1a\x55\xd6\x17\x6b\x48\xa0\xd1\xdd\x78\xfd\xfa\x01\xbc\x79\xf7\xae\xaa\x5e\xc3\xdd\x01\xe1\x56\x99\x13\xdc\x0e\x7a\x2f\x77\x0a\xe1\xce\xdc\xa3\x06\xe7\x85\x6e\x84\x6d\xaa\xea\xf5\x6b\xd8\xa6\x97\xfc\x6e\x0b\xb5\xd1\xde\x8a\xda\x83\xd4\x1e\x6d\x2b\x6a\xac\x2a\x32\x94\x7f\x82\x3f\x08\x0f\x42\x29\x68\x93\x59\xcf\x66\xd3\x4c\x07\x27\x33\xa8\x06\x0e\xe2\x48\xaf\xe8\x79\x6b\x6c\x07\xde\x5c\x57\x5f\x5b\x10\x30\x38\xb4\x0e\x4e\x42\x7b\x47\xef\x1b\xec\x95\x19\x41\x80\xc6\xd3\xc2\xd4\x06\xfc\x01\xa5\xcd\xbf\xab\x60\x59\x23\x36\x34\x53\x76\xbd\xc2\x0e\xb5\xa7\x61\x30\x0b\x64\xf2\xf7\x9a\xfd\x2f\x8c\x2c\xdc\x6b\x8d\xa2\x1c\x51\x40\x64\xc5\x0e\x0a\x1d\x08\xdd\x80\x16\x9d\xd4\xfb\x8a\xc3\xf5\xb3\x0c\xb8\x1e\x6b\xd9\x4a\x74\xd7\x21\x85\xff\x15\x83\xf2\x5b\xb0\xe8\xcc\x60\x29\x61\x5f\x44\x7d\x00\x51\xd7\x66\x60\xdf\x84\x07\x73\xd2\x2e\x04\x97\xd2\x93\x82\x60\x3f\x04\x39\x4c\xfb\x52\x63\x65\x5a\x5e\x8e\x8d\x66\x9b\xe0\xbc\xb1\xd8\x80\xd4\x31\x25\xc9\x3a\x3d\x17\xfb\x18\xe5\x72\xd2\x41\x38\xe8\xd0\x1f\x4c\xe3\x20\xc7\x61\x4e\x1a\x2d\x47\x68\xfc\x01\x6d\xdc\x8e\x5a\x68\xa8\x85\x52\x31\xa4\x7f\x5a\x73\x94\x0d\xda\xed\x06\xb6\xff\xc2\x1a\xe5\x91\xff\xa6\x59\xdb\xcf\x42\x91\xa3\x53\xc0\x53\x6a\x1c\xbb\xe1\xca\x27\xd0\x60\xad\x84\x45\xe8\x2d\xbe\xaf\x8d\x6e\xa4\x97\x46\x87\x14\xf7\xc6\xf9\xf2\x19\xfb\x68\xd1\x79\x2b\x6b\x5f\x91\xb3\xf8\x80\xf5\x40\x2f\x21\xa6\xa5\x1d\x74\x1d\x06\x87\x54\x84\x90\x43\xf8\x23\xd0\x3a\x0e\x7b\x61\x85\x47\xd8\x61\x2d\x06\xf2\xc5\xc3\x5e\x1e\xd1\xf1\x70\x8a\x96\xff\x10\x3b\xa9\xa4\x1f\x69\x0b\xdc\x41\x58\xac\x04\x58\x6c\xd1\xa2\xae\x19\x17\x21\xcd\x21\xa1\x61\x0b\xb5\x1a\x01\x1f\x7a\xe3\xa2\xa9\x56\xa2\x6a\xdc\xe4\x51\x25\x35\x18\x8d\x60\x2c\x74\xc6\x62\xf2\x78\x4a\xc5\x75\x55\x7d\xa5\xd2\x71\x26\x3a\x14\x52\xbf\xf0\xa6\x13\xf7\x08\xf5\xe0\xbc\xe9\x72\x86\x63\x6a\x32\xe0\x29\x37\xf3\x2c\x53\x21\x19\x38\x0a\x2b\xcd\x40\xa3\xa5\xde\x3b\x38\x49\x7f\x60\xf3\x01\x79\xd7\xd5\xad\xb1\x80\x0f\x82\xcc\x6c\x40\x40\x2b\x86\x1a\x3d\xef\xfd\x0e\x27\xeb\xd8\xc0\x6e\x4c\x75\xcb\x35\xc0\xe9\x80\x04\x8a\x59\x71\x7d\x1e\x61\x70\x52\xef\x0b\x5f\x69\x6b\x27\xd7\x36\x31\x4c\xd3\x2e\x4a\x34\x13\x46\x45\x0e\x38\xd4\x0d\xcf\xb4\x01\x6e\xa9\x5a\x7a\x44\xfb\xde\x9b\xf7\xf4\xff\x86\x23\x32\x83\xa7\xaa\xa1\x35\x89\x04\x68\x21\xe6\x06\x0a\x56\x40\x8d\x64\x55\x81\xc2\x66\x8f\x16\x5c\x27\xac\xcf\x4b\x5d\xc3\x9d\x09\x2b\x45\xeb\xde\x80\xd0\x53\x1d\x6c\xaa\x40\x4f\xb1\x46\x1d\xa5\x64\xe4\x45\x1b\x2b\x4e\x45\x2a\xa1\xb5\xa6\x2b\x31\xc2\x54\x15\x4a\x88\x81\xdb\x60\x6f\x9c\xf4\x19\x1d\x60\xf4\x6c\xa5\x37\x2e\x61\x8b\x18\x92\x32\xef\x31\xd8\xb7\x42\xbb\x16\xed\x75\x55\xbd\xbb\xa9\xaa\x9b\x1b\xe6\xf1\x4e\x48\xbd\xe4\xf1\x62\x17\x6e\x6e\xe0\x1f\x6c\xfa\x71\x4e\x96\x4a\xcd\x08\x53\xba\x82\xe2\x6f\x6e\xaa\x7e\xd8\xad\x90\xff\x62\xcb\xbe\x57\x15\x00\x40\x74\xca\x1b\x2f\x14\xe8\xa1\xdb\xa1\x65\xb4\x87\xd4\x48\x0d\xf8\x20\x9d\xa7\x4a\xba\x4e\xe3\xbf\x7a\x90\x0e\x86\x3e\x96\x56\x01\x36\x4b\x8f\x50\xbb\xc1\xc6\xde\x12\xcc\xba\xa1\xef\xd5\x98\xa6\x3b\x2f\x46\x47\xa4\x37\x70\x69\x13\x4e\x82\xad\x46\x78\xe4\x41\xe4\xff\x51\xd8\x30\xfb\xdf\x3c\xf9\x03\xfc\xe7\x56\x3e\xfc\xe5\xcf\xd9\xe9\x2f\x47\x4c\x84\x2c\x1d\x60\x27\x3d\x61\xfd\x44\x1b\x47\x3e\x4d\xe1\x3b\xa8\x2d\x0a\x8f\x4d\x36\x8d\x3c\x95\xb3\xe0\xbe\x6a\xe9\xa5\x50\xf2\x1b\x36\x57\x32\xfc\x3d\x5f\xf0\xed\x45\x2b\x86\x6c\x11\x65\x25\x80\xe9\x00\x2b\x11\xa0\xb1\xba\xf6\xaf\x69\xe8\x95\xe8\xa8\x01\xa4\x25\x37\x3c\xf5\x03\x7c\x6a\x1a\x8b\xce\xfd\xf5\xa5\x2e\x44\xbc\x86\x9e\xf4\x94\x03\xbf\xa4\x81\x67\x0e\x78\xb3\xb6\x7c\x22\x8d\xf8\x3b\xe3\x61\xae\x27\x90\xb8\xa6\x8e\xc4\x6a\xf1\xf7\x41\x5a\x46\x87\x83\xd6\xd8\x9c\x1f\xe2\xa2\x38\x7f\x51\x86\x13\x9e\x98\x16\xc6\x3e\x23\x2f\x4d\xf8\x15\xa1\x31\xfa\x4d\x5e\x6a\xbe\x8a\xd1\xb0\xdd\xa5\xbe\x76\x40\x8b\x9b\x34\xaf\xe8\x22\x0a\x05\xb1\xb6\xe9\x23\x5e\x7a\xe3\x9c\x8c\xc4\x6d\xda\x00\x19\x5a\x3e\x92\x77\x1f\x23\x77\xd9\x67\x8a\x34\x38\xa1\xb1\x46\xe7\x84\x95\x6a\x8c\x4a\x80\xa9\xc4\x9c\x34\x44\x37\x66\xfe\xd3\x26\x9c\x77\xdb\x89\x90\x63\x5d\xc6\x75\x52\xba\x8a\x67\xe5\xeb\xdb\x44\x49\xec\x8f\x1b\x76\x91\x22\x96\x29\x65\xa1\x90\x78\xaa\x34\x10\x58\xda\x0f\x96\xb0\xb3\xd4\x1c\xb9\xe7\x58\xec\xcc\x11\x9b\xdc\x7b\xd6\x9d\xb9\x2b\x7a\xfa\x1b\xae\x70\x74\x0e\x14\x1e\x51\x11\x5c\xfb\x61\xa7\x64\xbd\x81\xdd\x90\x38\xcb\x51\xfa\x04\x25\x77\xa7\xb0\x2b\x4d\xa5\x9d\xe2\x46\x3d\x29\x1d\x6e\x2e\xde\x58\x06\x06\xfb\x95\xf3\x38\xd7\x52\xa5\xad\x9a\x15\x19\x97\xb6\x1a\x99\xd5\xc3\xf2\xc9\xd5\xa7\xc2\x09\xcb\x76\x62\x84\xbd\x15\xda\x47\x99\x15\x17\xc9\x21\x52\x87\x4d\x80\xa1\x70\xe4\x31\x31\x59\x76\xa1\xcf\xaa\x80\x36\x2a\xb4\x24\xc1\x6a\x35\x2a\xd0\x7a\x26\xe1\xa8\x70\xd9\x76\x69\x85\x71\x9a\x60\x92\x43\xf7\x07\x6b\x86\x3d\xb5\xcb\xac\x79\x2e\x8b\x28\x88\x17\x0e\x8b\x72\xf2\x4c\x50\xbc\x79\x97\xc6\x44\xf6\x56\xc3\x99\xc5\x50\x5a\x7b\x71\x38\x54\x46\xed\xa0\x73\x81\x2c\x28\xec\xed\x07\xf8\x5b\x40\xf3\xf7\x3c\x85\xa7\x19\xb7\x7c\x14\x3d\xd8\x5a\x74\x51\xfb\xb7\xd1\xe7\x00\x31\x2a\x0e\x38\x0a\x35\xe0\xd9\xb4\x30\xe5\x3a\x96\x39\x7c\xfc\x08\xd1\x8b\xb3\x91\xf4\xef\x55\x22\x7c\xa1\xe2\x38\xe8\x06\xe7\x49\xaf\xd1\x4a\x4e\x74\x08\x22\xa4\x28\x59\x8c\xba\x73\x6a\x2a\x1c\xd3\xab\x99\xf9\x1f\xd5\xfc\xaf\x1f\x99\xaf\x93\xda\xff\x7f\xf8\x3a\x36\x93\x73\xba\x96\x7a\xd9\xfe\x9f\xa5\x6b\xa9\x6b\x35\x34\x48\xca\x2e\x1d\x14\x82\x0b\xf5\x01\xeb\xfb\x79\xe4\x91\x01\x92\x8d\x13\xf2\x29\x93\x76\x85\xf4\xf6\x25\x72\x3b\xc4\x1e\xe4\x76\x55\x70\x41\x63\xd2\x98\x75\x69\xbd\x01\x25\xef\xe9\x64\xa8\x24\x9f\xb2\x3a\x92\x27\x42\x37\x59\xbf\xb0\xe6\xa4\xe7\xa4\x59\x64\xcb\x28\xf5\xd0\xab\x70\x2e\x80\x67\xa9\x3e\x6d\xcb\x82\xea\x63\xa6\x2f\x62\xfa\x28\xf3\x89\xcc\x42\x9b\x4f\x1a\x35\x84\x50\x4e\x5c\xdf\xa7\xa9\xde\xc6\x1e\x9f\xaa\xaf\x68\xf8\x2a\x48\x92\x50\x53\x6f\x97\x45\x65\x71\xa5\xa6\x68\x46\x2e\x8d\x9f\x63\x5d\x5e\xfd\xf4\xf6\x91\xe2\x88\x62\x24\x03\x20\x95\x46\x80\xdf\x11\x2f\x05\x7d\x3c\xd2\x3e\x8d\x79\x92\x87\x42\xea\x80\xa0\x49\x2d\xf0\x31\x10\xca\x53\x7b\x9a\x4f\x7d\xb2\x28\x14\xe2\x3b\x52\x5d\x1a\x4f\x61\xdc\x9b\x20\xbd\xa2\xd4\xdc\x94\x50\x4e\x26\x58\xa5\x67\xb5\x09\xb5\xb1\x16\x6b\xaf\xc6\x4b\x20\x13\x83\x5a\x20\x66\x12\xee\x0b\xbe\x88\x5c\xfe\xc6\x2d\xf1\x90\x94\x75\x1c\x3f\x57\xd5\xf4\x8f\x3c\xbc\x5a\xbc\x3d\xdb\xee\x75\x0e\x75\xa8\xda\x92\x0a\x93\x95\xf5\xed\xfe\xbc\xd8\xe6\x32\x35\x09\xb0\xe1\x51\x32\x74\x29\x00\xca\x7d\x2b\x8f\x38\x45\x8b\x59\x22\x60\xba\x89\xf0\xe6\xb1\xd3\xeb\x92\xd5\xee\xf8\x64\x58\x2b\x61\x45\xba\xd4\x60\x5e\xab\x2d\x1f\xff\xc6\x9e\x55\x89\x58\x3b\x88\x75\x28\xf4\x9c\x97\xf0\x88\x76\x5c\x1e\x0a\xf3\xcc\xf9\x85\x81\x5b\x9e\xf8\xa2\x0d\xce\x64\x83\xad\xd4\x58\x7a\x12\xba\xa0\xd9\xfd\x86\xd1\x52\xe6\xc2\x70\x29\x90\x3b\xdd\x65\x17\x45\xc5\xfd\x50\x51\x1a\x91\xd9\x39\x9b\x2e\x5f\xa7\xd0\x9b\xe9\x4a\xe5\x31\x94\xb3\x83\x1f\xb2\x00\xde\x64\x7e\xdc\x14\xb0\x7f\x01\xea\x5f\x0e\xfa\x68\x74\xba\x25\x09\xdb\x17\x13\x1a\xae\xbc\x26\x11\x29\xbf\xcd\xa5\x4b\xba\x44\x35\x27\x47\xda\x8f\xa2\x48\xfa\x74\x81\xe0\xe4\xe8\x71\xa1\xc2\x9f\xae\xbe\xd5\xf3\x40\xa1\xf5\xb7\x41\x4b\x6c\x27\xb5\xcf\xf6\x5d\x5e\x35\xf5\x2e\x48\x52\x2b\xc9\xfd\x63\x09\x8d\xdc\x05\x93\x65\x6c\x66\x0c\x06\x7f\x8c\xfe\x5a\x6d\x15\x33\xea\xf8\xf9\x19\x15\xf5\x29\x48\xa7\x49\x13\x25\x0a\x51\x41\x60\x0a\x0d\xc6\x02\xfe\x3e\x08\x15\x7e\xad\x08\xaa\x27\x65\x14\x3c\xa9\x13\xe9\x58\xc2\x69\x22\xdd\x2e\xd4\x74\x2b\xb4\xdd\x61\x6b\x2c\x6e\x59\xa3\xa0\x8f\x3b\xa1\x86\xbc\xe8\xa2\xcf\xac\x19\x8f\xf7\xba\x3b\xdc\x4b\xad\x09\x45\x8b\xab\xd2\xe9\x12\x75\x65\xf6\xf3\x8c\xcc\x0e\x5e\x95\x8f\xdf\xc2\xfb\xa7\xb3\xfd\xf7\xd4\xe1\xce\x1a\x33\x5f\x8d\x45\xf9\x33\x65\xb6\xb7\x78\xe4\x7b\xcb\x02\x7d\x2f\xd3\xb0\x2b\x9a\x08\xbc\xb8\xc7\x33\xc4\x0a\x7a\xd2\x0b\x2b\x3a\xf4\xf1\x1a\x5c\x34\xcd\x5c\xfc\x14\x65\x10\x69\x6e\x81\x84\x78\x19\xff\x68\x49\xbe\x48\x07\x5d\xd8\x18\xd7\xb6\xe1\x4f\xe9\x71\x29\x9b\x1e\xd3\x4a\x4f\x6f\x8a\x1b\xba\x67\x77\x63\xba\x23\x7a\xd1\x89\x22\xe8\x9b\x2f\x5d\xef\xc7\xb5\x36\xfb\x49\x8f\xe1\xce\x35\x7d\x82\x98\x9f\xb4\xf9\x82\x94\x2d\xc4\x4f\x44\x65\x6f\x9a\xdd\xac\x1c\xc4\xe4\xf2\xc7\x8f\xf0\xd3\xb2\x79\xd0\x8e\x2c\x7d\xb9\x5a\xe3\x9c\x95\x2d\x39\x3f\xb4\x4d\xd2\x14\x5e\x51\x23\xd0\x78\x52\x63\xd2\x72\xd1\x49\x4e\x30\x7f\xe0\xf9\x86\xd6\x9c\x6b\x92\x94\xa9\x1f\xf1\x9e\x57\xba\xa9\x7f\x97\x32\x41\x3a\xf8\x8d\x4d\xa1\x65\x48\x86\x03\xf3\x50\x7e\x3e\x3b\xfb\x02\x56\x85\x6e\xbd\x94\x11\x62\x67\x8e\xb8\xc9\x77\x25\xe7\x23\xf8\x53\x90\x36\x0c\x8c\x60\x1b\x1b\xb2\x65\x74\x71\x47\x15\x29\xa7\x33\xfc\x31\x62\x79\x7b\xfc\xcb\xd0\x75\x23\x7c\xff\x51\xc1\xff\x02\x00\x00\xff\xff\xb9\x57\xa9\xfb\x8a\x1c\x00\x00"

func fungibletokenCdcBytes() ([]byte, error) {
	return bindataRead(
		_fungibletokenCdc,
		"FungibleToken.cdc",
	)
}

func fungibletokenCdc() (*asset, error) {
	bytes, err := fungibletokenCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FungibleToken.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd9, 0xde, 0xd5, 0x68, 0x7c, 0x88, 0xc9, 0xa8, 0x1e, 0xd, 0xee, 0xbe, 0x78, 0xd1, 0xb4, 0x65, 0xce, 0x74, 0x82, 0x74, 0x6c, 0x7b, 0xd8, 0x25, 0x89, 0x19, 0x24, 0x99, 0x66, 0x9b, 0x3d, 0x17}}
	return a, nil
}

var _tokenforwardingCdc = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x4f\xe3\x38\x14\xbf\xfb\x53\x3c\x69\xa5\xa5\x45\x90\xa2\xd5\x6a\x0f\x88\x15\xbb\xda\x1d\x8e\x73\x40\xcc\xcc\x71\xf4\x6a\xbf\x34\xa6\xa9\x1d\xd9\x2f\x0d\x15\xe2\xbb\x8f\x9e\x93\xb8\x09\x94\x19\xb8\x90\xa4\xf6\xef\xdf\xfb\xd9\xab\xf3\x73\xa5\x7e\x83\xbb\xd6\x6d\xec\xba\x26\x78\xf0\x5b\x72\x70\xe7\x43\x87\xc1\x58\xb7\x81\xff\xbc\xe3\x80\x9a\x95\x7a\xa8\x6c\x04\x3d\xbc\x42\xac\x7c\x17\xa1\xf2\x1d\xa0\x03\xd4\xda\xb7\x8e\x41\xfb\xb6\x36\x10\x89\xa1\x6d\x00\x41\xb7\x91\xfd\x2e\x83\xf7\xd8\xf7\xa4\xc9\xee\x29\x28\xf6\x80\x75\xed\x3b\xe0\x8a\x76\xc0\x1e\xca\x9e\x15\x58\xd6\x45\xf9\x82\x60\x6c\x59\x52\x20\xc7\x99\xa3\xab\xc8\xd1\x9e\x82\x6c\x3b\x40\xe8\xd1\x86\x3d\x85\xa8\xa4\x03\x68\x74\xd0\xb4\xeb\xda\xc6\x0a\x58\x64\x0f\x86\x28\x40\xa0\xe8\xdb\xa0\x09\x30\x02\x66\x31\xa0\xb1\xc1\xb5\xad\x2d\x1f\xe0\xb1\x8d\x0c\xb5\xdd\x12\x20\x7c\xc5\xb6\xe6\x0b\x85\xce\x08\x1d\x44\x72\x82\x61\x3c\x45\x77\xc6\x40\x7b\x72\xe0\x88\x44\x32\x6c\x9d\xef\xc0\x32\xd8\x78\x14\x5d\x28\xf5\xad\x22\x37\x8d\xa8\x43\xc7\xc9\x9b\x0e\x84\x2c\x1c\x59\xdb\x45\x6f\x49\x63\x5d\x27\xb6\x7e\xc5\x67\xea\xf2\x0a\x55\xb6\x4e\xb3\xf5\x82\x68\xa0\x09\x7e\x6f\x0d\x09\x69\x67\xb9\x4a\x7b\xb2\xa1\x40\x49\x82\x26\xe0\x0a\xb9\x47\x16\xee\x49\xd0\x8a\x2b\xb2\xe1\x18\x77\xa1\xd4\xf9\x4a\x29\xbb\x6b\x7c\xe0\x57\x53\x2b\x83\xdf\xc1\xd5\xd3\xd5\x1f\x4a\x35\xed\xfa\x58\x83\xf4\xeb\xa4\x2e\xcf\x4a\x01\x00\xac\x56\xf0\x69\x2f\x53\x4b\xe4\x36\x02\xed\x2c\x33\x99\x34\xbd\x91\x11\x03\x81\xa1\xc6\x47\xcb\x7d\x84\x62\x80\x31\x6c\x88\xc7\xb9\x86\x84\x26\x8c\x94\xe0\xc6\x24\xcc\xff\xfd\xbe\x05\xee\x24\xd5\x6b\xf8\x72\x67\x9f\xfe\xfa\xf3\x22\xe9\xbc\x86\x7f\x8d\x09\x14\xe3\xed\x52\xe5\xfd\x79\xee\x39\xcc\xeb\xb9\xc5\x22\x47\x37\x78\x18\x7c\xa4\xda\xdb\x28\xca\x03\x25\x89\x53\xcd\xc9\x48\x67\xeb\x1a\xd6\xa9\x1e\x5c\xcc\xf7\x12\xf0\xa1\x21\xb0\xce\x58\x8d\x4c\x71\x08\x24\x65\x82\xd3\x21\xf9\xf4\x3a\x31\xdd\x43\xe4\x47\xd4\x9a\x62\x5c\x44\xaa\xcb\x25\xec\x51\x06\xac\x6d\x63\x49\xcc\xff\xfe\x7c\xda\xc9\xcb\xcc\xc8\x20\xfb\x14\xf8\x6a\x25\x59\xf4\xcd\xea\xeb\x82\x5b\x8a\x63\xff\xc1\xaf\x1f\x49\x73\x3a\x31\x0e\x30\x6c\xda\x5d\x3a\x90\xce\x8c\x4d\x8a\x53\x24\xcb\xe3\x2c\xb3\xc4\xb3\x38\x20\xb5\x51\x4a\x92\x8e\x12\xfb\x40\xe6\x98\xc0\x29\x59\x32\xb7\xb2\x75\xa3\xf2\x45\x3f\xdc\x7f\xe6\x66\x13\xf0\x12\x9e\xf3\x2e\xf9\x93\xba\xbd\x5f\x16\xc1\x29\xd6\x58\xa3\xd3\x34\x56\x46\x82\x2d\x7c\xe7\x28\xdc\x16\xd8\xd7\x67\x39\x83\x4c\x0b\xb2\xa3\x62\xae\xe9\xe6\x52\xfe\x1f\x37\xcc\x93\xd7\x15\xba\x0d\xdd\x8f\x7b\x87\xf7\x38\xcf\x08\x7c\x99\x3e\x94\xf9\xaa\x1a\x52\x1c\x8e\xb9\x39\x2e\xfd\x59\x56\xaf\xb8\x16\xdf\xc1\x51\x77\xff\x81\xae\xbc\x8e\x70\xee\x17\xfe\x9e\xe1\x9c\x32\x6a\x9d\xe5\xc5\x47\x5a\xf9\x4b\xa6\xb7\x46\x5f\xd4\x84\x4c\x12\x7d\x73\x35\x0e\x9f\xa4\xb4\x8e\xba\xd9\x85\x3f\x9e\xb1\x7c\x49\xbe\x93\xe8\x90\x66\x4e\xf2\x0d\xc7\xc7\xdc\x49\x43\x33\xfb\xd1\x69\x20\x6e\x83\x83\x9b\xcb\xe1\xe2\x3f\x89\x9a\x1f\x97\x83\xe1\x17\xf5\x23\x00\x00\xff\xff\xb4\xb9\x1f\xb9\xa2\x07\x00\x00"

func tokenforwardingCdcBytes() ([]byte, error) {
	return bindataRead(
		_tokenforwardingCdc,
		"TokenForwarding.cdc",
	)
}

func tokenforwardingCdc() (*asset, error) {
	bytes, err := tokenforwardingCdcBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "TokenForwarding.cdc", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x49, 0x6b, 0xd6, 0xf9, 0x4b, 0x43, 0x71, 0xdf, 0x55, 0x17, 0x52, 0x92, 0x48, 0x1, 0xb8, 0x4d, 0x9e, 0x80, 0x93, 0x35, 0xaf, 0x87, 0xe0, 0xbe, 0xe, 0x4e, 0xee, 0xb, 0x76, 0x9, 0x36, 0x5d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"CustodialDeposit.cdc": custodialdepositCdc,
	"FlowToken.cdc":        flowtokenCdc,
	"FungibleToken.cdc":    fungibletokenCdc,
	"TokenForwarding.cdc":  tokenforwardingCdc,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"CustodialDeposit.cdc": &bintree{custodialdepositCdc, map[string]*bintree{}},
	"FlowToken.cdc":        &bintree{flowtokenCdc, map[string]*bintree{}},
	"FungibleToken.cdc":    &bintree{fungibletokenCdc, map[string]*bintree{}},
	"TokenForwarding.cdc":  &bintree{tokenforwardingCdc, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
