// Code generated by mockery v2.13.0. DO NOT EDIT.

package mocks

import (
	cadence "github.com/onflow/cadence"
	flow "github.com/onflow/flow-go-sdk"

	flowkit "github.com/onflow/flow-cli/pkg/flowkit"

	mock "github.com/stretchr/testify/mock"
)

// Gateway is an autogenerated mock type for the Gateway type
type Gateway struct {
	mock.Mock
}

// ExecuteScript provides a mock function with given fields: _a0, _a1
func (_m *Gateway) ExecuteScript(_a0 []byte, _a1 []cadence.Value) (cadence.Value, error) {
	ret := _m.Called(_a0, _a1)

	var r0 cadence.Value
	if rf, ok := ret.Get(0).(func([]byte, []cadence.Value) cadence.Value); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cadence.Value)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]byte, []cadence.Value) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: _a0
func (_m *Gateway) GetAccount(_a0 flow.Address) (*flow.Account, error) {
	ret := _m.Called(_a0)

	var r0 *flow.Account
	if rf, ok := ret.Get(0).(func(flow.Address) *flow.Account); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Address) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByHeight provides a mock function with given fields: _a0
func (_m *Gateway) GetBlockByHeight(_a0 uint64) (*flow.Block, error) {
	ret := _m.Called(_a0)

	var r0 *flow.Block
	if rf, ok := ret.Get(0).(func(uint64) *flow.Block); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockByID provides a mock function with given fields: _a0
func (_m *Gateway) GetBlockByID(_a0 flow.Identifier) (*flow.Block, error) {
	ret := _m.Called(_a0)

	var r0 *flow.Block
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Block); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollection provides a mock function with given fields: _a0
func (_m *Gateway) GetCollection(_a0 flow.Identifier) (*flow.Collection, error) {
	ret := _m.Called(_a0)

	var r0 *flow.Collection
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Collection); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields: _a0, _a1, _a2
func (_m *Gateway) GetEvents(_a0 string, _a1 uint64, _a2 uint64) ([]flow.BlockEvents, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 []flow.BlockEvents
	if rf, ok := ret.Get(0).(func(string, uint64, uint64) []flow.BlockEvents); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]flow.BlockEvents)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, uint64, uint64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestBlock provides a mock function with given fields:
func (_m *Gateway) GetLatestBlock() (*flow.Block, error) {
	ret := _m.Called()

	var r0 *flow.Block
	if rf, ok := ret.Get(0).(func() *flow.Block); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Block)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLatestProtocolStateSnapshot provides a mock function with given fields:
func (_m *Gateway) GetLatestProtocolStateSnapshot() ([]byte, error) {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransaction provides a mock function with given fields: _a0
func (_m *Gateway) GetTransaction(_a0 flow.Identifier) (*flow.Transaction, error) {
	ret := _m.Called(_a0)

	var r0 *flow.Transaction
	if rf, ok := ret.Get(0).(func(flow.Identifier) *flow.Transaction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionResult provides a mock function with given fields: _a0, _a1
func (_m *Gateway) GetTransactionResult(_a0 *flow.Transaction, _a1 bool) (*flow.TransactionResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *flow.TransactionResult
	if rf, ok := ret.Get(0).(func(*flow.Transaction, bool) *flow.TransactionResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*flow.Transaction, bool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
// GetTransactionResult provides a mock function with given fields: _a0, _a1
func (_m *Gateway) GetTransactionResultByID(_a0 flow.Identifier, _a1 bool) (*flow.TransactionResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *flow.TransactionResult
	if rf, ok := ret.Get(0).(func(flow.Identifier, bool) *flow.TransactionResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.TransactionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(flow.Identifier, bool) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *Gateway) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecureConnection provides a mock function with given fields:
func (_m *Gateway) SecureConnection() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SendSignedTransaction provides a mock function with given fields: _a0
func (_m *Gateway) SendSignedTransaction(_a0 *flowkit.Transaction) (*flow.Transaction, error) {
	ret := _m.Called(_a0)

	var r0 *flow.Transaction
	if rf, ok := ret.Get(0).(func(*flowkit.Transaction) *flow.Transaction); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*flowkit.Transaction) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewGatewayT interface {
	mock.TestingT
	Cleanup(func())
}

// NewGateway creates a new instance of Gateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGateway(t NewGatewayT) *Gateway {
	mock := &Gateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
